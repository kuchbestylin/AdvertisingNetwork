@page "/"
@using IdentityModel.Client
@using Newtonsoft.Json
@using System.Security.Claims
@inject TokenService tokenService
@inject ILogger<Home> _logger
@inject HttpClient http
@inject TokenProvider tokenProvider
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Account/Manage">
                <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <form action="Account/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" class="nav-link">
                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                </button>
            </form>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Account/Register">
                <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Account/Login">
                <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
            </NavLink>
        </div>
    </NotAuthorized>
</AuthorizeView>

<h1>Hello, w2orld!</h1>

Welcome to your new app.
@if(data != null)
{
    <table>
        @foreach (var item in data)
        {
            <tr>
                <td>@item.Date</td>
                <td>@item.Summary</td>
                <td>@item.TemperatureC</td>
                <td>@item.TemperatureF</td>
            </tr>
        }
    </table>
}
else
{
    <p>No data recieved.</p>
}
<AuthorizeView>
    <p>3 @context.User.Claims.First(x => x.Type == ClaimTypes.Email).Value;</p>
    <p>4 @context.User.Claims.First(x => x.Type == ClaimTypes.NameIdentifier).Value;</p>
    <p>5 @context.User.Claims.First(x => x.Type == ClaimTypes.Role).Value;</p>
    <p>6 @context.User.Claims.First(x => x.Type == ClaimTypes.UserData).Value;</p>
    <p>7 @context.User.Claims.First(x => x.Type == ClaimTypes.Sid).Value;</p>
    <p>8 @context.User.FindFirst("sub")?.Value;</p>
</AuthorizeView>
@code{
    private string? currentUrl;
    WeatherForecast[] data;
    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        using var client = new HttpClient();
        try
        {
            var token = tokenProvider.AccessToken;
            var request = new HttpRequestMessage(HttpMethod.Get,
                "https://localhost:7264/weatherforecast");
            Console.WriteLine(token);
            request.Headers.Add("Authorization", $"Bearer {token}");
            var response = await http.SendAsync(request);
            Console.WriteLine(response.StatusCode);
            Console.WriteLine(response.IsSuccessStatusCode);
            Console.WriteLine(response.ReasonPhrase);
            Console.WriteLine(response.RequestMessage);
            response.EnsureSuccessStatusCode();

            data = await response.Content.ReadFromJsonAsync<WeatherForecast[]>() ??
                Array.Empty<WeatherForecast>();

        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
            throw e;
        }
    }
    record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)
    {
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}

