@inject DialogService DialogService
@inject User localUser
@inject IDataStore dataStore
@inject NotificationService alert
@inject NavigationManager navigationManager


<div class="col-lg-6">
    <div class="card">
        <div class="card-header">
            <h4 class="card-title mb-0">Your Sites</h4>
        </div><!-- end card header -->

        <div class="card-body">
            <div class="row g-4 mb-3">
                <div class="col-sm-auto">
                    <div>
                        <button type="button" class="btn btn-success add-btn" @onclick="ShowInlineDialog"><i class="ri-add-line align-bottom me-1"></i> Add</button>
                        <button class="btn btn-soft-danger"><i class="ri-delete-bin-2-line"></i></button>
                    </div>
                </div>
                <div class="col-sm">
                    <div class="d-flex justify-content-sm-end">
                        <div class="search-box ms-2">
                            <input type="text" class="form-control search" placeholder="Search...">
                            <i class="ri-search-line search-icon"></i>
                        </div>
                    </div>
                </div>
            </div>
            <RadzenDataGrid TItem="RegisteredWebsite" Data="@registeredWebsites">
                <EmptyTemplate>
                    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;" class="@((progressVisible) ? "d-none" : "d-block")">No records to display.</p>
                    <div class="d-flex justify-content-center">
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Visible="progressVisible" Mode="ProgressBarMode.Indeterminate" />
                    </div>
                </EmptyTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="RegisteredWebsite" Property="Id" Title="Sn" Width="50px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="RegisteredWebsite" Property="Domain" Title="Name">
                        <Template Context="website">
                            <div>
                                <a @onclick="() => NavigateToReport(website.AdsEnabled, website.Id.ToString())" class="text-decoration-underline">@website.Domain</a>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="RegisteredWebsite" Property="IsActive" Title="Ads Enabled">
                        <Template Context="website">
                            <div>
                                <RadzenSwitch Value="website.AdsEnabled" Change="() => OnSwitchChanged(website)" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})" />
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="RegisteredWebsite" Property="ExcludedPages" Title="Excluded Pages">
                        <Template Context="website">
                            <div>
                                @website.ExcludedPages.Count()
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div><!-- end card -->
    </div>
    <!-- end col -->
</div>

@code {
    string emptyText = "No Items to display!";
    static bool progressVisible = true;
    List<RegisteredWebsite>? registeredWebsites = new List<RegisteredWebsite>();
    protected async override Task OnInitializedAsync()
    {
        var user = await dataStore.GetUserAsync(localUser);
        if (user is not null)
        {
            localUser.Id = user.Id;
            try
            {
                registeredWebsites = await dataStore.GetSitesAsync(user.Id);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        progressVisible = false;
        StateHasChanged();
    }

    async Task ShowInlineDialog()
    {
        var result = await DialogService.OpenAsync("Add a new Site", ds =>
    @<RadzenStack Gap="1.5rem">
        <AddSiteSteps />
    </RadzenStack>
    , new DialogOptions() { Draggable = true, Resizable = true});
    }
    public void NavigateToReport(bool adsEnabled, string id)
    {
        if (adsEnabled)
        {
            navigationManager.NavigateTo($"site-dashboard/{id}");
        }
        alert.Notify(NotificationSeverity.Error, "Ads Disabled");
    }
    public async void OnSwitchChanged(RegisteredWebsite site)
    {
        try
        {
            await ShowScriptTagDialog(site);
        }
        catch(Exception ex)
        {

        }
    }
    bool verifyCheckBox = false;
    public bool ScanForTag(RegisteredWebsite site, string script)
    {
        HtmlWeb web = new HtmlWeb();
        try
        {
            HtmlDocument document = web.Load(site.Domain);

            HtmlNodeCollection scriptNodes = document.DocumentNode.SelectNodes("//script");

            if(scriptNodes != null)
            {
                foreach (HtmlNode scriptNode in scriptNodes)
                {
                    string srcAttribute = scriptNode.GetAttributeValue("src", "");
                    string fingerprintAttribute = scriptNode.GetAttributeValue("fingerprint", "");

                    if (srcAttribute.Contains($"https://{site.BaseUri}/Uploads/advert_event_tracking_module.js")
                        && fingerprintAttribute.Contains(site.TagHashCode))
                    {
                        return true;
                    }
                }
                alert.Notify(NotificationSeverity.Error, "Verification was Unsuccessful");
                verificationFailed = true;
                return false;
            }
            else
            {
                alert.Notify(NotificationSeverity.Error, "Code could not be found");
                verificationFailed = true;
                return false;
            }
        }
        catch(Exception ex)
        {
            verificationFailed = true;
            return false;
        }
        verificationFailed = true;
        return false;
    }
    public async void VerifySiteAgainstScript(DialogService ds, RegisteredWebsite site, string script)
    {
        verifybuttonBusy = true;
        StateHasChanged();
        try
        {
            bool result = ScanForTag(site: site, script);
            if(result is true)
            {
                var response = await dataStore.EnableAdsAsync(site.Id);
                alert.Notify(NotificationSeverity.Success, "Success Congratulations!!!!");
                registeredWebsites = await dataStore.GetSitesAsync(localUser.Id);
                ds.Close();
            }
        }
        catch(Exception ex)
        {
            alert.Notify(NotificationSeverity.Error, ex.Message);
        }
        finally
        {
            verifybuttonBusy = false;
        }

    }
    public bool verifybuttonBusy = false;
    private bool verificationFailed = false;
    async Task ShowScriptTagDialog(RegisteredWebsite site)
    {
        var result = await DialogService.OpenAsync("Verify Ownership", ds =>
    @<RadzenColumn>
        <RadzenColumn Gap="0.5rem">
            <div class="w-100">
                <RadzenTextArea Style="width: 100%; height: 300px; font-size: 1em" ReadOnly="true" Value="@($""""<script async src="https://{site.BaseUri}/Uploads/advert_event_tracking_module.js" fingerprint="{site.TagHashCode}" crossorigin="anonymous"></script>"""")" />
            </div>
            <div class="w-100 d-flex flex-column">
                <div class="pt-2">
                    <p class="text-warning">Place this code in your Home page then click Verify</p>
                </div>
                <div class="d-flex align-items-end gap-4">
                    <div class="@((verifybuttonBusy) ? "" : "d-none")">
                        <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small">
                            <Template>Wait</Template>
                        </RadzenProgressBarCircular>
                    </div>
                    <RadzenButton Style="width: 100px" Disabled=@verifybuttonBusy IsBusy=@verifybuttonBusy Text="Verify" BusyText="Please Wait.." Click=@(() => VerifySiteAgainstScript(ds, site, $""""<script async src="https://{site.BaseUri}/Uploads/advert_event_tracking_module.js" fingerprint="{site.TagHashCode}" crossorigin="anonymous"></script>"""")) />
                </div>
            </div>
        </RadzenColumn>
    </RadzenColumn>);
    }
}