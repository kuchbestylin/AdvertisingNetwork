@inject DialogService DialogService
@inject User localUser
@inject IDataStore dataStore
@inject NotificationService alert
@inject NavigationManager navigationManager


<div class="col-lg-6">
    <div class="card">
        <div class="card-header">
            <h4 class="card-title mb-0">Your Sites</h4>
        </div><!-- end card header -->

        <div class="card-body">
            <div class="row g-4 mb-3">
                <div class="col-sm-auto">
                    <div>
                        <button type="button" class="btn btn-success add-btn" @onclick="ShowInlineDialog"><i class="ri-add-line align-bottom me-1"></i> Add</button>
                        <button class="btn btn-soft-danger"><i class="ri-delete-bin-2-line"></i></button>
                    </div>
                </div>
                <div class="col-sm">
                    <div class="d-flex justify-content-sm-end">
                        <div class="search-box ms-2">
                            <input type="text" class="form-control search" placeholder="Search...">
                            <i class="ri-search-line search-icon"></i>
                        </div>
                    </div>
                </div>
            </div>
            <RadzenDataGrid TItem="RegisteredWebsite" Data="@registeredWebsites">
                <EmptyTemplate>
                    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;" class="@((progressVisible) ? "d-none" : "d-block")">No records to display.</p>
                    <div class="d-flex justify-content-center">
                        <RadzenProgressBarCircular Value="100" ShowValue="false" Visible="progressVisible" Mode="ProgressBarMode.Indeterminate" />
                    </div>
                </EmptyTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="RegisteredWebsite" Property="Id" Title="Sn" Width="50px" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="RegisteredWebsite" Property="Domain" Title="Name">
                        <Template Context="website">
                            <div>
                                <a @onclick="() => NavigateToReport(website.AdsEnabled, website.Id.ToString())" class="text-decoration-underline">@website.Domain</a>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="RegisteredWebsite" Property="IsActive" Title="Ads Enabled">
                        <Template Context="website">
                            <div>
                                <RadzenSwitch @bind-Value=@website.AdsEnabled Change="() => OnSwitchChanged(website)" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "Switch value" }})" />
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="RegisteredWebsite" Property="ExcludedPages" Title="Excluded Pages">
                        <Template Context="website">
                            <div>
                                @website.ExcludedPages.Count()
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div><!-- end card -->
    </div>
    <!-- end col -->
</div>

@code {
    string emptyText = "No Items to display!";
    static bool progressVisible = true;
    List<RegisteredWebsite>? registeredWebsites = new List<RegisteredWebsite>();
    protected async override Task OnInitializedAsync()
    {
        var user = await dataStore.GetUserAsync(localUser);
        if (user is not null)
        {
            localUser.Id = user.Id;
            try
            {
                registeredWebsites = await dataStore.GetSitesAsync(user.Id);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        progressVisible = false;
        StateHasChanged();
    }

    async Task ShowInlineDialog()
    {
        var result = await DialogService.OpenAsync("Add a new Site", ds =>
    @<RadzenStack Gap="1.5rem">
        <AddSiteSteps />
    </RadzenStack>
    , new DialogOptions() { Draggable = true, Resizable = true});
    }
    public void NavigateToReport(bool adsEnabled, string id)
    {
        if (adsEnabled)
        {
            navigationManager.NavigateTo($"site-dashboard/{id}");
        }
        alert.Notify(NotificationSeverity.Error, "Ads Disabled");
    }
    public async void OnSwitchChanged(RegisteredWebsite site)
    {
        try
        {
            await ShowScriptTagDialog(site);
        }
        catch(Exception ex)
        {
            
        }
    }
    async Task ShowScriptTagDialog(RegisteredWebsite site)
    {
        var result = await DialogService.OpenAsync("Verify Ownership", ds =>
    @<RadzenStack Gap="1.5rem">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <div>
                <RadzenTextArea ReadOnly="true">
                    @($""""<script async src="{navigationManager.BaseUri}/Uploads/" crossorigin="anonymous"></script>"""")
                </RadzenTextArea>
            </div>
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Style="width: 80px;" />
                <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
            </RadzenStack>
            <RadzenButton Text="Refresh" Click="(() => {ds.Refresh(); })" ButtonStyle="ButtonStyle.Light" />
        </RadzenStack>
    </RadzenStack>);
    }
}